<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAALcAAAETCAYAAAB0lJfTAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAABm2SURBVHhe7Z1drB3XWYY3UQSldhROfiTbiX8SHNvxT0+y7bhpDU5sKyciimIVt2pRS0xrUoQq
        CpSi8lNVVdUovSCqEKIU0UjpLVJ7gZTcgKFIRHBBrhARVxVSe4PFFeIOxLCeb+abs/Z47XP27JnZZ87y
        +0rvmb1nZq9Zs9Yz33yzZvY+k3smk2IS+XOHjxTfevRE8ZePHCm+d/y4TWV5rH7j0CHjFW5jjiuXL66u
        7St+fPZDRXHuqaI4Oy2Kp56W5XHbWWUa3sPvubV7Z+EG7P85d75ccbpuK/7v2ScHs23nNp/bXB4qG68v
        yynDrHFrkJf8FBcvxYBPyojNkRBW6NXVEUYFbMNAHCryX0+et22+e/Jobeb552zd6LMzZcrylp4aWwY3
        uYqRT8ROrtzBVmYAOhxNP3j8dPGlh5N50YypD+tuwl5GdVne1lUEJyhevn+tmJCM20xf0Ie9vLARLkr9
        ovV68J8H/33wvzb8TjDLWMdBf/3QiQryCvA+6yjn55rjqbEz4YoTCMu0IfGBNg4Fe+7OqeHM2t4S0mCH
        +K+q958/dqp4+fJL5l97/Kni69UyXw/Qjwbz+ZunTpZpyhBnFzlDT20EpR+4o4hKOURroPzi5P0GKpH6
        q5N9xcnf/1oxeeu9YvJeUUz+vfJ/RK/Dsp98/c8MdkD/t2AOBI/iyr/lxdwz3H7RaIVWUAInEfnBV79T
        TH5Ygez+z//btL93yPGbN4svPHC4jvaUadcHRPD69JOoiyz3CbdHVI/YpBTk0J9Yf7aYvPPDEtYK4J/4
        76J0UU0j16A74CHCP/GxX7fIj8nduSg1wBt1kOVN9xy5ffjF8+srL32yTD9iqAF6Oycgf+A3XrODxSM4
        d6XYgWRdZLkXuAPUfI7ITVQlxyYVefHcpRJMIG0DdmyHnHQmApyzAoDb2DyAWxQfMeiWPlX1rM841Xtf
        Fq87Vnt929r3O7UsZV8/ts9vrpsy64U27Qj3JlieZxOxybEtFWkbsVMGcMoB8HAWuHZmagfPS+Eg+syR
        o7Ztz/XTddxhh8a2ujHKQ8NX0x9Nz9iNK9qes5Dcv+GjU+QGLOx5NnmxXTwStQOUSWDbGsApD8Dfeq/e
        Th29AzCjhdujcnUTiyDAwY85yzGmjzlYnw1TuT/bMHLXtIQxaI/a9mQWEHaN2A1belJFcC4w2RZA2MVl
        qIdf0O6oiczY3geoeR3alYvsbxw+UMNcP4X5vvKZHvaBYU7AZ907zfCXmt/VxuKycNv64XOEfzoN4Bij
        rqN2j3DPRO83b1rkttw7ALL0gdm3vR6kHuE1Bz1AE6XPTu42oGkr5pOWsA6fs8/4gZGT7axVHeS0j6dm
        7DfmPcurdqv7MC5jWYdyO+XcFi1DQXQaoxg2kuHDfkTuFKTLupF7+82hOjWxhkzXc1Uuzx5Te1yASL0J
        9R5raG8v2prX1t50snVGuszdatvX6iCnPTigOTsRTTlbMeU9qVrdLuFzbRmc764XlKFCXBQBGKMYADdE
        SuK21KSCm2FG4D4dzCloRwEJ23awOdC+fOSh6vmYPZt3VauOZt2yncuItmib1+vt5H5uZ4/EVseyLSw1
        CG3x6N67LP0COL/go50487Kc1/UzRL6Pnfa1h9ESjjwqB2g8IzJISlLZ4Kb8APeJP/hT2yYXDkTJdP1W
        4BrQsjM5wKkTbULb1Kfi1Gdbe7pEH63O5QFeTjmoaYOvHD5Rnlk5sA3+sC7t4e/DlABJNCcY9PcMUWe4
        yzuSXCAB2sYrf7gyuH/qm2/bNomQHPX9AdTStt1NsDmT8KilRaHQQd7hd4TD/rLfgMoDc7eevmLzjCsH
        OuonbxsPDp4FeH92O5B7SEuAmyGXnYCbVAi4bcQkarTBXW2L9sJ0KGCTX1+++76y01iHzgyNXE4T5exm
        R+3N/ho7YT/Zf+CO971ezvu4jPDe5oeyvM240AZwIr+VgdlWtL3F3EPk5tTrkdtutwNf8KrSkp2K3HVb
        hXZj+6Qipw4cqPLGaN0V12tlrvervIDmPUGGr3cxpn/b+i3MWbBO63w+kEfrbO+e4KYiRNHfnP5cecEH
        gAHEFKBLOxws8WgJt+K5UwlUXJyk6jacy7uimHzfLx7vqFQkgpvXzgFt0H3/p5YRUJ7l60vl3z2kJewM
        lWDc2Z67/pcI7j6jt8MdwMY8bUjkro/wurGHt59K6QAbIQp1IF+0jm4dYXapq/Y2kMM+c50BTNY21gaz
        KYitB6Q1qI2UpLlumE96Q5l13h6ts707wu2VIOcGbBvnfvNmGV17zrvjlGTy17fsBo4/IcgB1n7nOzjs
        M7lhGbEnZQek1svaJbww4AGOKDu3H6ozGoEIW0QO7Zhcn4MjrP9PT1yob9I1D5bt3UNaQgUphPSANMHy
        buDGPaUmBrZH7XBm4NkVH1cnYtiOh3ok6zeA6STybC6eGMe1ba9w++NymULYRWRyeXAAFZj9K4OXntmw
        KcGB/NyCZLy+tWWZ+vlBM7N8IfeQljBl41SCSGq3xENktSgb3Dl6N3Jt4ObbORxIbPP7j1GXsiFuq1+P
        Lssv0446zw5RxecPvf3xemrfhbWzFymHH+hu1glT+uq1114LPbqps88/Z33Z/IxxSLQO5qAxPmn727a9
        lXuK3JhKEEnr6O25d5f828GmDOAOZTJKQtT271X6RZzVI1W/Ph224c+LLB9RMnPV9xZkKiBnHCIzbbb/
        2MnQo7O6dSsEwdCONh4+57OcGe3Aad2/HeGuj7DqtENFZx57rS7+WgMO1J6K8NkqYvvjrn4hyemQnaAe
        Q0dOtsGBRMRm6NPGYVm2ioNqzA7973dkt3IzarvqJyS3sLU1ASy1/bnuA27v3PB5xjn9ho6lJ35x6YAD
        q0PeBL2aNwN1DHZIdfj2vH9RwXLtsE2DOtShbd0XctUmVnaIIkRsOtK3PbP/cx1Opx3HfUfpaL9pk799
        5x1YTYpl+x8OOXlDHrm3EgdFOdS7E2lJZftsKINBfHZ2BnAgBVBAd8gr0Gv7PJazXpWGGNwBbJ6wA2xP
        CSwdSdSjT9dgh/2igX10pNz24hexq6jryl3v+9T65Nt/8UaFY1q0WzN6b2xsFJ995dPVu7RevHq1zLkX
        bOtN9wg3pw2iKB3JqQYQAJyLTG641KD61AGOzXxfp1qPHJuDBLABnEayce1Q+ZVcxDXALvPsFg8wte6U
        3eapwXf5+ssVjmkRpQ8ePGhtePHiRZveuHGjWjpf3ubt2ewT7lCYdWSVfwM4z1pw8QfkXBXzPEgM7gzI
        zXnf/rviF08/V3/e4WLs07aVrEMPZh+C7cAJbUJe79v2HN/XMafKiJxl1I4d2sifB1lEpCgY2LcT61m5
        YRvtA1mvcEeuorh9QTNUjogLoJhRjo88/7JFZAC2X5/C4TXwM9LC+kBNtLbUJphc3qImFxYLQLWsaQMH
        m4jtaRANVUPfYvvZw10d7FwHbZeatBVDhfWjFa37fCi4/UgLU6Id48FEcqBlJMVBB2DSFuZhj9JMOQh8
        0J9KlkfuKlKR0Fmh3pvPjGyCXW9fcEcu28RHyxaJyIvIo3bdfqseLZnvMm0oyyuPbMZB/QfBgRZwiIpA
        jAGfef5dQ8wQkO0cMLmrsntx2Ge37zudxN1HIhF18PFbW17XoVHOVm67/m40+xjaiP4k2naVj6LUaWBq
        m9t6MLgjA4+nEuE18FBpvqHB4D/DakwxeTnLLP1gp6rPDhKtQ31sfz0ihG2xbQ4wvnBA45b12HyGZubz
        8qxD+9BOBKdPffx6hWl7GdgHDtiwb7c2XwHclFmWG6cUAVyDavPJsHpeMPNqoEK9BoGbAydMOTM41B6t
        Ga8vT4dRGtKpoe8M02+0G0PBRPC2KYqnIv58frd+r+COn89YtWt450ybr7dzDWJ18NQHDdNqGR3AcCI7
        D9R+h42ziD26GrZnDeRl4dsaT77N1k4lR1yz0KaMbW8HOcsZ72Z9S0Ws/av+Sm1nIVdw84fhnNwMqP6I
        JY1Gg5MXEqE5ffqtX0Z1DGrB3M1xu4XXpHUED9qYSA7ojKi4eT85dtiWk4bU11dxmUu7gpvOptNzsqcZ
        bqKzj75gHsgBeGvQECnq9Ehgd3PVhnYWrd7Txjw85SNQmD5imI/58Rm3/lxnV3ATwXIzF4VEZy5U/cky
        YLaLRE57VWPWjRG/lns26WGYepvHjpff9rqLo7TEOjxHVztaN1qcf880hpyX4wvK0OmcEjg973azH/Wp
        Luyov/d5rHN7Y8h5uYJ70HFuWd4RC245W3eF2/NaWR7aKf629JJwW+4aPswoBCMSfAuc0QlZ7tNw5Y9n
        lMyleUx7KbirW9JhfSrAg+d8W8Kf05Xlvry+vl68cPkFuy+xGrh9CC1MidqAvcg3KiSprQicn/yVX14h
        3FXkZl3BLQ0pwS1lK8EtZSvBLWUrwS1lK8EtZSvBLWUrwS1lK8EtZSvBLWWrGG77OmCSx3kW3NKIpcgt
        ZSvBLWUrwS1lK8EtZSvBLWUrwS1lK8EtZSvBLWWrGG7dxJGykuCWspXSEilbCW4pWwluKVsJbilbCW4p
        WwluKVsJbilbCW4pWwluKVsJbilbCW4pWwluKVsJbilbCW4pWwluKVsJbilbCW4pWwluKVsJbilbCW4p
        WwluKVsJbilbCW4pWwluKVsJbilbCW4pWwluKVsJbilbCW4pWwluKVsJbilbxXDr97mlrCS4pWyltETK
        VorcUrZS5JayleCWspXglrKV4JayleCWspXglrKV4JayleCWspXglrKV4JayleCWspXglrKV4JayleCW
        spXglrKV4JayleCWspXglrKV4JayleCWspXglrKV4JayleCWspXglrKV4JayleCWspXglrJVDLd+K1DK
        SoJbylaCW8pWyrmlbCW4pWwluKVsJbilbKULSilbCW4pWwluKVsp55ayleCWspXglrKV4JayleCWspXg
        lrKV4JayleCWslUMt27iSFlJcEvZSmmJlK0Et5StBLeUrQS3lK0Et5StBLeUrQS3lK0Et5StBLeUrQS3
        lK0Et5StBLeUrWK49eCUlJUEt5StBLeUrZRzS9lKcEvZSnBL2UpwS9lKcEvZSnBL2UpwS9lKcEvZSnBL
        2UpwS9lKcEvZSnBL2UpwS9lKcEvZSnBL2SqGW89zS1lJkVvKVoJbylZKS6RsJbilbKW0RMpWglvKVoJb
        ylaCW8pWglvKVoJbylajgHt9fd0qIst9Gq52DO7TYaOTAwcMcFkewvsf3rdauItzT9m6Xz7yUHFmba9B
        LstD+NzavcXl+9dCjnIpweJWXgbuALa/XuxgaOGo7F1j6uxOLZe7ueKyPWtLRe6Gp+t3tjmTuVPL5W6m
        XUPgWFFaUrmKVmzUTRmy3Iedp82oTQBJcDjXfURuWR6lBbecrZeB208ZpCXhdXm6WMJVWmNOLV/GQ5SZ
        8qq209bz6jVv/m5ws+4hD18sCC8Dt22kfM0D5HeyOchT83faY63Xsq6DabDn4jNMJt0Sblse1vvB46eL
        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
        SUVORK5CYII=
</value>
  </data>
</root>